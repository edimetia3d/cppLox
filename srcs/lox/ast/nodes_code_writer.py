import os.path
import sys
import datetime

file_template = """
// clang-format off
// DO NOT EDIT: this file is generated by {this_file_name} at {current_time}
// The file in source tree will only be used when python3 is not found by cmake, and might be out of sync.

#include "lox/lox_object.h"
namespace lox{{
{class_forward_decl}
class {target_key}Visitor {{

protected:
{virtual_visit_decls}
}};

class {target_key}State {{
 public:
  virtual ~{target_key}State() {{}}
  
  virtual object::LoxObject Accept({target_key}Visitor * visitor) = 0;

}};


{class_decls}

}} // namespace lox
// clang-format on
"""

class_template = """
class {class_name}State:public {target_key}State
{{
public:
explicit {class_name}State({init_params})
:{init}{{}}
{member_def}
object::LoxObject Accept({target_key}Visitor * visitor) override {{
  return visitor->Visit(this);
}}
}};
"""


def gen_code(input_file_path, output_file_path, target_key = "Expr"):
    import re
    with open(input_file_path, "r") as f:
        split_str = re.split("({|})", f.read())
        all_dict = {"Stmt": {}, "Expr": {}}
        i = 0
        while i < len(split_str):
            if split_str[i] == "{":
                all_dict[split_str[i - 1].strip()].update(eval("{" + split_str[i + 1] + "}"))
                i = i + 3
            i = i + 1

        all_def = all_dict[target_key]

    with open(output_file_path, "w") as output_file:
        class_decls = ""
        virtual_visit_decls = ""
        class_forward_decl = ""
        type_id = 10000
        for class_name in all_def:
            type_id += 1
            virtual_visit_decls += f"""
friend class {class_name}State;
virtual object::LoxObject Visit({class_name}State *) = 0;
"""
            class_forward_decl += f"""class {class_name}State;\n"""
            member_list = all_def[class_name].split(",")
            member_def = ""
            member_init_params = []
            member_init = []
            for member in member_list:
                cut_by_space = list(filter(lambda x: x != "", member.split(" ")))
                member_type = cut_by_space[0]
                member_name = cut_by_space[1]
                member_def = member_def + f"{member_type} {member_name};\n"
                member_init_params.append(f"{member_type} {member_name}")
                member_init.append(f"{member_name}(std::move({member_name}))")
            member_init = ",\n".join(member_init)
            member_init_params = ",".join(member_init_params)
            class_decls = class_decls + class_template.format(target_key = target_key,
                                                              class_name = class_name,
                                                              init_params = member_init_params,
                                                              init = member_init,
                                                              member_def = member_def,
                                                              type_id = type_id)
        output_file.write(file_template.format(target_key = target_key,
                                               this_file_name = os.path.basename(__file__),
                                               current_time = datetime.datetime.now().strftime("%m/%d/%Y, %H:%M:%S"),
                                               class_forward_decl = class_forward_decl,
                                               class_decls = class_decls,
                                               virtual_visit_decls = virtual_visit_decls)
                          )


if __name__ == "__main__":
    input_file_path = "expr_stmt_def.tpl"
    output_file_path = "tmp_gen_output.h.inc"
    target_key = "Expr"
    if len(sys.argv) >= 2:
        input_file_path = sys.argv[1]

    if len(sys.argv) >= 3:
        output_file_path = sys.argv[2]

    if len(sys.argv) >= 4:
        target_key = sys.argv[3]

    gen_code(input_file_path, output_file_path, target_key = target_key)
