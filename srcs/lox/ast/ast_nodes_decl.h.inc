
// clang-format off
// DO NOT EDIT: this file is generated by nodes_code_writer.py at 01/30/2022, 19:29:05
// The file in source tree will only be used when python3 is not found by cmake, and might be out of sync.
#ifndef LOX_AST_AST_NODE_DECL_H_INC
#define LOX_AST_AST_NODE_DECL_H_INC
#include <memory>
#include "lox/token/token.h"
#include "lox/ast/ast_node.h"

namespace lox{
class AssignExpr;
class LogicalExpr;
class BinaryExpr;
class GroupingExpr;
class LiteralExpr;
class UnaryExpr;
class CallExpr;
class GetAttrExpr;
class SetAttrExpr;
class VariableExpr;
class VarDeclStmt;
class WhileStmt;
class ForStmt;
class ExprStmt;
class FunctionStmt;
class ClassStmt;
class PrintStmt;
class ReturnStmt;
class BlockStmt;
class IfStmt;
class BreakStmt;

class IASTNodeVisitor {

protected:

friend class AssignExpr;
virtual void Visit(AssignExpr *) = 0;

friend class LogicalExpr;
virtual void Visit(LogicalExpr *) = 0;

friend class BinaryExpr;
virtual void Visit(BinaryExpr *) = 0;

friend class GroupingExpr;
virtual void Visit(GroupingExpr *) = 0;

friend class LiteralExpr;
virtual void Visit(LiteralExpr *) = 0;

friend class UnaryExpr;
virtual void Visit(UnaryExpr *) = 0;

friend class CallExpr;
virtual void Visit(CallExpr *) = 0;

friend class GetAttrExpr;
virtual void Visit(GetAttrExpr *) = 0;

friend class SetAttrExpr;
virtual void Visit(SetAttrExpr *) = 0;

friend class VariableExpr;
virtual void Visit(VariableExpr *) = 0;

friend class VarDeclStmt;
virtual void Visit(VarDeclStmt *) = 0;

friend class WhileStmt;
virtual void Visit(WhileStmt *) = 0;

friend class ForStmt;
virtual void Visit(ForStmt *) = 0;

friend class ExprStmt;
virtual void Visit(ExprStmt *) = 0;

friend class FunctionStmt;
virtual void Visit(FunctionStmt *) = 0;

friend class ClassStmt;
virtual void Visit(ClassStmt *) = 0;

friend class PrintStmt;
virtual void Visit(PrintStmt *) = 0;

friend class ReturnStmt;
virtual void Visit(ReturnStmt *) = 0;

friend class BlockStmt;
virtual void Visit(BlockStmt *) = 0;

friend class IfStmt;
virtual void Visit(IfStmt *) = 0;

friend class BreakStmt;
virtual void Visit(BreakStmt *) = 0;

};


struct AssignExprAttr: public ASTNodeAttr{
Token name;
};

class AssignExpr:public Expr {
public:
AssignExpr(const AssignExprAttr & attr_,ExprPtr&& value_):attr(std::make_unique<AssignExprAttr>(attr_)),value(std::move(value_)){
AddChild(&value);
}

void Accept(IASTNodeVisitor *visitor) override {
    visitor->Visit(this);
}

std::unique_ptr<AssignExprAttr> attr;
ExprPtr value;
};


struct LogicalExprAttr: public ASTNodeAttr{
Token op;
};

class LogicalExpr:public Expr {
public:
LogicalExpr(const LogicalExprAttr & attr_,ExprPtr&& left_,ExprPtr&& right_):attr(std::make_unique<LogicalExprAttr>(attr_)),left(std::move(left_)),right(std::move(right_)){
AddChild(&left);
AddChild(&right);
}

void Accept(IASTNodeVisitor *visitor) override {
    visitor->Visit(this);
}

std::unique_ptr<LogicalExprAttr> attr;
ExprPtr left;
ExprPtr right;
};


struct BinaryExprAttr: public ASTNodeAttr{
Token op;
};

class BinaryExpr:public Expr {
public:
BinaryExpr(const BinaryExprAttr & attr_,ExprPtr&& left_,ExprPtr&& right_):attr(std::make_unique<BinaryExprAttr>(attr_)),left(std::move(left_)),right(std::move(right_)){
AddChild(&left);
AddChild(&right);
}

void Accept(IASTNodeVisitor *visitor) override {
    visitor->Visit(this);
}

std::unique_ptr<BinaryExprAttr> attr;
ExprPtr left;
ExprPtr right;
};


struct GroupingExprAttr: public ASTNodeAttr{

};

class GroupingExpr:public Expr {
public:
GroupingExpr(const GroupingExprAttr & attr_,ExprPtr&& expression_):attr(std::make_unique<GroupingExprAttr>(attr_)),expression(std::move(expression_)){
AddChild(&expression);
}

void Accept(IASTNodeVisitor *visitor) override {
    visitor->Visit(this);
}

std::unique_ptr<GroupingExprAttr> attr;
ExprPtr expression;
};


struct LiteralExprAttr: public ASTNodeAttr{
Token value;
};

class LiteralExpr:public Expr {
public:
LiteralExpr(const LiteralExprAttr & attr_):attr(std::make_unique<LiteralExprAttr>(attr_)){

}

void Accept(IASTNodeVisitor *visitor) override {
    visitor->Visit(this);
}

std::unique_ptr<LiteralExprAttr> attr;

};


struct UnaryExprAttr: public ASTNodeAttr{
Token op;
};

class UnaryExpr:public Expr {
public:
UnaryExpr(const UnaryExprAttr & attr_,ExprPtr&& right_):attr(std::make_unique<UnaryExprAttr>(attr_)),right(std::move(right_)){
AddChild(&right);
}

void Accept(IASTNodeVisitor *visitor) override {
    visitor->Visit(this);
}

std::unique_ptr<UnaryExprAttr> attr;
ExprPtr right;
};


struct CallExprAttr: public ASTNodeAttr{
Token position_in_src;
};

class CallExpr:public Expr {
public:
CallExpr(const CallExprAttr & attr_,ExprPtr&& callee_,std::vector<ExprPtr>&& arguments_):attr(std::make_unique<CallExprAttr>(attr_)),callee(std::move(callee_)),arguments(std::move(arguments_)){
AddChild(&callee);
AddChild(&arguments);
}

void Accept(IASTNodeVisitor *visitor) override {
    visitor->Visit(this);
}

std::unique_ptr<CallExprAttr> attr;
ExprPtr callee;
std::vector<ExprPtr> arguments;
};


struct GetAttrExprAttr: public ASTNodeAttr{
Token attr_name;
};

class GetAttrExpr:public Expr {
public:
GetAttrExpr(const GetAttrExprAttr & attr_,ExprPtr&& src_object_):attr(std::make_unique<GetAttrExprAttr>(attr_)),src_object(std::move(src_object_)){
AddChild(&src_object);
}

void Accept(IASTNodeVisitor *visitor) override {
    visitor->Visit(this);
}

std::unique_ptr<GetAttrExprAttr> attr;
ExprPtr src_object;
};


struct SetAttrExprAttr: public ASTNodeAttr{
Token attr_name;
};

class SetAttrExpr:public Expr {
public:
SetAttrExpr(const SetAttrExprAttr & attr_,ExprPtr&& src_object_,ExprPtr&& value_):attr(std::make_unique<SetAttrExprAttr>(attr_)),src_object(std::move(src_object_)),value(std::move(value_)){
AddChild(&src_object);
AddChild(&value);
}

void Accept(IASTNodeVisitor *visitor) override {
    visitor->Visit(this);
}

std::unique_ptr<SetAttrExprAttr> attr;
ExprPtr src_object;
ExprPtr value;
};


struct VariableExprAttr: public ASTNodeAttr{
Token name;
};

class VariableExpr:public Expr {
public:
VariableExpr(const VariableExprAttr & attr_):attr(std::make_unique<VariableExprAttr>(attr_)){

}

void Accept(IASTNodeVisitor *visitor) override {
    visitor->Visit(this);
}

std::unique_ptr<VariableExprAttr> attr;

};


struct VarDeclStmtAttr: public ASTNodeAttr{
Token name;
};

class VarDeclStmt:public Stmt {
public:
VarDeclStmt(const VarDeclStmtAttr & attr_,ExprPtr&& initializer_):attr(std::make_unique<VarDeclStmtAttr>(attr_)),initializer(std::move(initializer_)){
AddChild(&initializer);
}

void Accept(IASTNodeVisitor *visitor) override {
    visitor->Visit(this);
}

std::unique_ptr<VarDeclStmtAttr> attr;
ExprPtr initializer;
};


struct WhileStmtAttr: public ASTNodeAttr{

};

class WhileStmt:public Stmt {
public:
WhileStmt(const WhileStmtAttr & attr_,ExprPtr&& condition_,StmtPtr&& body_):attr(std::make_unique<WhileStmtAttr>(attr_)),condition(std::move(condition_)),body(std::move(body_)){
AddChild(&condition);
AddChild(&body);
}

void Accept(IASTNodeVisitor *visitor) override {
    visitor->Visit(this);
}

std::unique_ptr<WhileStmtAttr> attr;
ExprPtr condition;
StmtPtr body;
};


struct ForStmtAttr: public ASTNodeAttr{

};

class ForStmt:public Stmt {
public:
ForStmt(const ForStmtAttr & attr_,StmtPtr&& initializer_,ExprPtr&& condition_,ExprPtr&& increment_,StmtPtr&& body_):attr(std::make_unique<ForStmtAttr>(attr_)),initializer(std::move(initializer_)),condition(std::move(condition_)),increment(std::move(increment_)),body(std::move(body_)){
AddChild(&initializer);
AddChild(&condition);
AddChild(&increment);
AddChild(&body);
}

void Accept(IASTNodeVisitor *visitor) override {
    visitor->Visit(this);
}

std::unique_ptr<ForStmtAttr> attr;
StmtPtr initializer;
ExprPtr condition;
ExprPtr increment;
StmtPtr body;
};


struct ExprStmtAttr: public ASTNodeAttr{

};

class ExprStmt:public Stmt {
public:
ExprStmt(const ExprStmtAttr & attr_,ExprPtr&& expression_):attr(std::make_unique<ExprStmtAttr>(attr_)),expression(std::move(expression_)){
AddChild(&expression);
}

void Accept(IASTNodeVisitor *visitor) override {
    visitor->Visit(this);
}

std::unique_ptr<ExprStmtAttr> attr;
ExprPtr expression;
};


struct FunctionStmtAttr: public ASTNodeAttr{
Token name;
std::vector<Token> params;
};

class FunctionStmt:public Stmt {
public:
FunctionStmt(const FunctionStmtAttr & attr_,std::vector<StmtPtr>&& body_):attr(std::make_unique<FunctionStmtAttr>(attr_)),body(std::move(body_)){
AddChild(&body);
}

void Accept(IASTNodeVisitor *visitor) override {
    visitor->Visit(this);
}

std::unique_ptr<FunctionStmtAttr> attr;
std::vector<StmtPtr> body;
};


struct ClassStmtAttr: public ASTNodeAttr{
Token name;
};

class ClassStmt:public Stmt {
public:
ClassStmt(const ClassStmtAttr & attr_,ExprPtr&& superclass_,std::vector<StmtPtr>&& methods_):attr(std::make_unique<ClassStmtAttr>(attr_)),superclass(std::move(superclass_)),methods(std::move(methods_)){
AddChild(&superclass);
AddChild(&methods);
}

void Accept(IASTNodeVisitor *visitor) override {
    visitor->Visit(this);
}

std::unique_ptr<ClassStmtAttr> attr;
ExprPtr superclass;
std::vector<StmtPtr> methods;
};


struct PrintStmtAttr: public ASTNodeAttr{

};

class PrintStmt:public Stmt {
public:
PrintStmt(const PrintStmtAttr & attr_,ExprPtr&& expression_):attr(std::make_unique<PrintStmtAttr>(attr_)),expression(std::move(expression_)){
AddChild(&expression);
}

void Accept(IASTNodeVisitor *visitor) override {
    visitor->Visit(this);
}

std::unique_ptr<PrintStmtAttr> attr;
ExprPtr expression;
};


struct ReturnStmtAttr: public ASTNodeAttr{
Token keyword;
};

class ReturnStmt:public Stmt {
public:
ReturnStmt(const ReturnStmtAttr & attr_,ExprPtr&& value_):attr(std::make_unique<ReturnStmtAttr>(attr_)),value(std::move(value_)){
AddChild(&value);
}

void Accept(IASTNodeVisitor *visitor) override {
    visitor->Visit(this);
}

std::unique_ptr<ReturnStmtAttr> attr;
ExprPtr value;
};


struct BlockStmtAttr: public ASTNodeAttr{

};

class BlockStmt:public Stmt {
public:
BlockStmt(const BlockStmtAttr & attr_,std::vector<StmtPtr>&& statements_):attr(std::make_unique<BlockStmtAttr>(attr_)),statements(std::move(statements_)){
AddChild(&statements);
}

void Accept(IASTNodeVisitor *visitor) override {
    visitor->Visit(this);
}

std::unique_ptr<BlockStmtAttr> attr;
std::vector<StmtPtr> statements;
};


struct IfStmtAttr: public ASTNodeAttr{

};

class IfStmt:public Stmt {
public:
IfStmt(const IfStmtAttr & attr_,ExprPtr&& condition_,StmtPtr&& thenBranch_,StmtPtr&& elseBranch_):attr(std::make_unique<IfStmtAttr>(attr_)),condition(std::move(condition_)),thenBranch(std::move(thenBranch_)),elseBranch(std::move(elseBranch_)){
AddChild(&condition);
AddChild(&thenBranch);
AddChild(&elseBranch);
}

void Accept(IASTNodeVisitor *visitor) override {
    visitor->Visit(this);
}

std::unique_ptr<IfStmtAttr> attr;
ExprPtr condition;
StmtPtr thenBranch;
StmtPtr elseBranch;
};


struct BreakStmtAttr: public ASTNodeAttr{
Token src_token;
};

class BreakStmt:public Stmt {
public:
BreakStmt(const BreakStmtAttr & attr_):attr(std::make_unique<BreakStmtAttr>(attr_)){

}

void Accept(IASTNodeVisitor *visitor) override {
    visitor->Visit(this);
}

std::unique_ptr<BreakStmtAttr> attr;

};



} // namespace lox

#endif // LOX_AST_AST_NODE_DECL_H_INC
// clang-format on
