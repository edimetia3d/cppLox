
// clang-format off
// DO NOT EDIT: this file is generated by nodes_code_writer.py at 08/08/2021, 19:11:30
// The file in source tree will only be used when python3 is not found by cmake, and might be out of sync.

#include "lox/lox_object/lox_object.h"
namespace lox{
class VarDeclStmtState;
class ExprStmtState;
class PrintStmtState;
class BlockStmtState;
class IfStmtState;

class StmtVisitor {

protected:

friend class VarDeclStmtState;
virtual object::LoxObject Visit(VarDeclStmtState *) = 0;

friend class ExprStmtState;
virtual object::LoxObject Visit(ExprStmtState *) = 0;

friend class PrintStmtState;
virtual object::LoxObject Visit(PrintStmtState *) = 0;

friend class BlockStmtState;
virtual object::LoxObject Visit(BlockStmtState *) = 0;

friend class IfStmtState;
virtual object::LoxObject Visit(IfStmtState *) = 0;

};

class StmtState {
 public:
  virtual ~StmtState() {}
  
  virtual object::LoxObject Accept(StmtVisitor * visitor) = 0;

};



class VarDeclStmtState:public StmtState
{
public:
explicit VarDeclStmtState(Token name,Expr initializer)
:name(std::move(name)),
initializer(std::move(initializer)){}
Token name;
Expr initializer;

object::LoxObject Accept(StmtVisitor * visitor) override {
  return visitor->Visit(this);
}
};

class ExprStmtState:public StmtState
{
public:
explicit ExprStmtState(Expr expression)
:expression(std::move(expression)){}
Expr expression;

object::LoxObject Accept(StmtVisitor * visitor) override {
  return visitor->Visit(this);
}
};

class PrintStmtState:public StmtState
{
public:
explicit PrintStmtState(Expr expression)
:expression(std::move(expression)){}
Expr expression;

object::LoxObject Accept(StmtVisitor * visitor) override {
  return visitor->Visit(this);
}
};

class BlockStmtState:public StmtState
{
public:
explicit BlockStmtState(std::vector<Stmt> statements)
:statements(std::move(statements)){}
std::vector<Stmt> statements;

object::LoxObject Accept(StmtVisitor * visitor) override {
  return visitor->Visit(this);
}
};

class IfStmtState:public StmtState
{
public:
explicit IfStmtState(Expr condition,Stmt thenBranch,Stmt elseBranch)
:condition(std::move(condition)),
thenBranch(std::move(thenBranch)),
elseBranch(std::move(elseBranch)){}
Expr condition;
Stmt thenBranch;
Stmt elseBranch;

object::LoxObject Accept(StmtVisitor * visitor) override {
  return visitor->Visit(this);
}
};


} // namespace lox
// clang-format on
