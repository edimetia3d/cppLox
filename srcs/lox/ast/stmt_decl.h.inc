
// clang-format off
// DO NOT EDIT: this file is generated by nodes_code_writer.py at 08/19/2021, 23:47:55
// The file in source tree will only be used when python3 is not found by cmake, and might be out of sync.

#include "lox/lox_object/lox_object.h"
namespace lox{
class VarDeclStmt;
class WhileStmt;
class ExprStmt;
class FunctionStmt;
class ClassStmt;
class PrintStmt;
class ReturnStmt;
class BlockStmt;
class IfStmt;
class BreakStmt;

class StmtVisitor {

protected:

friend class VarDeclStmt;
virtual object::LoxObject Visit(VarDeclStmt *) = 0;

friend class WhileStmt;
virtual object::LoxObject Visit(WhileStmt *) = 0;

friend class ExprStmt;
virtual object::LoxObject Visit(ExprStmt *) = 0;

friend class FunctionStmt;
virtual object::LoxObject Visit(FunctionStmt *) = 0;

friend class ClassStmt;
virtual object::LoxObject Visit(ClassStmt *) = 0;

friend class PrintStmt;
virtual object::LoxObject Visit(PrintStmt *) = 0;

friend class ReturnStmt;
virtual object::LoxObject Visit(ReturnStmt *) = 0;

friend class BlockStmt;
virtual object::LoxObject Visit(BlockStmt *) = 0;

friend class IfStmt;
virtual object::LoxObject Visit(IfStmt *) = 0;

friend class BreakStmt;
virtual object::LoxObject Visit(BreakStmt *) = 0;

};




class VarDeclStmt:public StmtBase
{
public:
explicit VarDeclStmt(Token name,Expr initializer)
:name(std::move(name)),
initializer(std::move(initializer)){}
Token name;
Expr initializer;

object::LoxObject Accept(StmtVisitor * visitor) override {
  return visitor->Visit(this);
}
};

class WhileStmt:public StmtBase
{
public:
explicit WhileStmt(Expr condition,Stmt body)
:condition(std::move(condition)),
body(std::move(body)){}
Expr condition;
Stmt body;

object::LoxObject Accept(StmtVisitor * visitor) override {
  return visitor->Visit(this);
}
};

class ExprStmt:public StmtBase
{
public:
explicit ExprStmt(Expr expression)
:expression(std::move(expression)){}
Expr expression;

object::LoxObject Accept(StmtVisitor * visitor) override {
  return visitor->Visit(this);
}
};

class FunctionStmt:public StmtBase
{
public:
explicit FunctionStmt(Token name,std::vector<Token> params,std::vector<Stmt> body)
:name(std::move(name)),
params(std::move(params)),
body(std::move(body)){}
Token name;
std::vector<Token> params;
std::vector<Stmt> body;

object::LoxObject Accept(StmtVisitor * visitor) override {
  return visitor->Visit(this);
}
};

class ClassStmt:public StmtBase
{
public:
explicit ClassStmt(Token name,std::vector<Stmt> methods)
:name(std::move(name)),
methods(std::move(methods)){}
Token name;
std::vector<Stmt> methods;

object::LoxObject Accept(StmtVisitor * visitor) override {
  return visitor->Visit(this);
}
};

class PrintStmt:public StmtBase
{
public:
explicit PrintStmt(Expr expression)
:expression(std::move(expression)){}
Expr expression;

object::LoxObject Accept(StmtVisitor * visitor) override {
  return visitor->Visit(this);
}
};

class ReturnStmt:public StmtBase
{
public:
explicit ReturnStmt(Token keyword,Expr value)
:keyword(std::move(keyword)),
value(std::move(value)){}
Token keyword;
Expr value;

object::LoxObject Accept(StmtVisitor * visitor) override {
  return visitor->Visit(this);
}
};

class BlockStmt:public StmtBase
{
public:
explicit BlockStmt(std::vector<Stmt> statements)
:statements(std::move(statements)){}
std::vector<Stmt> statements;

object::LoxObject Accept(StmtVisitor * visitor) override {
  return visitor->Visit(this);
}
};

class IfStmt:public StmtBase
{
public:
explicit IfStmt(Expr condition,Stmt thenBranch,Stmt elseBranch)
:condition(std::move(condition)),
thenBranch(std::move(thenBranch)),
elseBranch(std::move(elseBranch)){}
Expr condition;
Stmt thenBranch;
Stmt elseBranch;

object::LoxObject Accept(StmtVisitor * visitor) override {
  return visitor->Visit(this);
}
};

class BreakStmt:public StmtBase
{
public:
explicit BreakStmt(Token src_token)
:src_token(std::move(src_token)){}
Token src_token;

object::LoxObject Accept(StmtVisitor * visitor) override {
  return visitor->Visit(this);
}
};


} // namespace lox
// clang-format on
