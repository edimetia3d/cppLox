
// clang-format off
// DO NOT EDIT: this file is generated by nodes_code_writer.py at 08/18/2021, 00:43:04
// The file in source tree will only be used when python3 is not found by cmake, and might be out of sync.

#include "lox/lox_object/lox_object.h"
namespace lox{
class VarDeclStmtState;
class WhileStmtState;
class ExprStmtState;
class FunctionStmtState;
class ClassStmtState;
class PrintStmtState;
class ReturnStmtState;
class BlockStmtState;
class IfStmtState;
class BreakStmtState;

class StmtVisitor {

protected:

friend class VarDeclStmtState;
virtual object::LoxObject Visit(VarDeclStmtState *) = 0;

friend class WhileStmtState;
virtual object::LoxObject Visit(WhileStmtState *) = 0;

friend class ExprStmtState;
virtual object::LoxObject Visit(ExprStmtState *) = 0;

friend class FunctionStmtState;
virtual object::LoxObject Visit(FunctionStmtState *) = 0;

friend class ClassStmtState;
virtual object::LoxObject Visit(ClassStmtState *) = 0;

friend class PrintStmtState;
virtual object::LoxObject Visit(PrintStmtState *) = 0;

friend class ReturnStmtState;
virtual object::LoxObject Visit(ReturnStmtState *) = 0;

friend class BlockStmtState;
virtual object::LoxObject Visit(BlockStmtState *) = 0;

friend class IfStmtState;
virtual object::LoxObject Visit(IfStmtState *) = 0;

friend class BreakStmtState;
virtual object::LoxObject Visit(BreakStmtState *) = 0;

};

class StmtState {
 public:
  virtual ~StmtState() {}
  
  virtual object::LoxObject Accept(StmtVisitor * visitor) = 0;

};



class VarDeclStmtState:public StmtState
{
public:
explicit VarDeclStmtState(Token name,Expr initializer)
:name(std::move(name)),
initializer(std::move(initializer)){}
Token name;
Expr initializer;

object::LoxObject Accept(StmtVisitor * visitor) override {
  return visitor->Visit(this);
}
};

class WhileStmtState:public StmtState
{
public:
explicit WhileStmtState(Expr condition,Stmt body)
:condition(std::move(condition)),
body(std::move(body)){}
Expr condition;
Stmt body;

object::LoxObject Accept(StmtVisitor * visitor) override {
  return visitor->Visit(this);
}
};

class ExprStmtState:public StmtState
{
public:
explicit ExprStmtState(Expr expression)
:expression(std::move(expression)){}
Expr expression;

object::LoxObject Accept(StmtVisitor * visitor) override {
  return visitor->Visit(this);
}
};

class FunctionStmtState:public StmtState
{
public:
explicit FunctionStmtState(Token name,std::vector<Token> params,std::vector<Stmt> body)
:name(std::move(name)),
params(std::move(params)),
body(std::move(body)){}
Token name;
std::vector<Token> params;
std::vector<Stmt> body;

object::LoxObject Accept(StmtVisitor * visitor) override {
  return visitor->Visit(this);
}
};

class ClassStmtState:public StmtState
{
public:
explicit ClassStmtState(Token name,std::vector<Stmt> methods)
:name(std::move(name)),
methods(std::move(methods)){}
Token name;
std::vector<Stmt> methods;

object::LoxObject Accept(StmtVisitor * visitor) override {
  return visitor->Visit(this);
}
};

class PrintStmtState:public StmtState
{
public:
explicit PrintStmtState(Expr expression)
:expression(std::move(expression)){}
Expr expression;

object::LoxObject Accept(StmtVisitor * visitor) override {
  return visitor->Visit(this);
}
};

class ReturnStmtState:public StmtState
{
public:
explicit ReturnStmtState(Token keyword,Expr value)
:keyword(std::move(keyword)),
value(std::move(value)){}
Token keyword;
Expr value;

object::LoxObject Accept(StmtVisitor * visitor) override {
  return visitor->Visit(this);
}
};

class BlockStmtState:public StmtState
{
public:
explicit BlockStmtState(std::vector<Stmt> statements)
:statements(std::move(statements)){}
std::vector<Stmt> statements;

object::LoxObject Accept(StmtVisitor * visitor) override {
  return visitor->Visit(this);
}
};

class IfStmtState:public StmtState
{
public:
explicit IfStmtState(Expr condition,Stmt thenBranch,Stmt elseBranch)
:condition(std::move(condition)),
thenBranch(std::move(thenBranch)),
elseBranch(std::move(elseBranch)){}
Expr condition;
Stmt thenBranch;
Stmt elseBranch;

object::LoxObject Accept(StmtVisitor * visitor) override {
  return visitor->Visit(this);
}
};

class BreakStmtState:public StmtState
{
public:
explicit BreakStmtState(Token src_token)
:src_token(std::move(src_token)){}
Token src_token;

object::LoxObject Accept(StmtVisitor * visitor) override {
  return visitor->Visit(this);
}
};


} // namespace lox
// clang-format on
