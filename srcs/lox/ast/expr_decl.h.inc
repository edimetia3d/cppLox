
// clang-format off
// DO NOT EDIT: this file is generated by nodes_code_writer.py at 08/22/2021, 14:19:26
// The file in source tree will only be used when python3 is not found by cmake, and might be out of sync.

#include "lox/lox_object/lox_object.h"
#include "lox/token.h"
namespace lox{
class AssignExpr;
class LogicalExpr;
class BinaryExpr;
class GroupingExpr;
class LiteralExpr;
class UnaryExpr;
class CallExpr;
class GetAttrExpr;
class SetAttrExpr;
class VariableExpr;

class ExprVisitor {

protected:

friend class AssignExpr;
virtual object::LoxObject Visit(AssignExpr *) = 0;

friend class LogicalExpr;
virtual object::LoxObject Visit(LogicalExpr *) = 0;

friend class BinaryExpr;
virtual object::LoxObject Visit(BinaryExpr *) = 0;

friend class GroupingExpr;
virtual object::LoxObject Visit(GroupingExpr *) = 0;

friend class LiteralExpr;
virtual object::LoxObject Visit(LiteralExpr *) = 0;

friend class UnaryExpr;
virtual object::LoxObject Visit(UnaryExpr *) = 0;

friend class CallExpr;
virtual object::LoxObject Visit(CallExpr *) = 0;

friend class GetAttrExpr;
virtual object::LoxObject Visit(GetAttrExpr *) = 0;

friend class SetAttrExpr;
virtual object::LoxObject Visit(SetAttrExpr *) = 0;

friend class VariableExpr;
virtual object::LoxObject Visit(VariableExpr *) = 0;

};




class AssignExpr:public ExprBase
{
private:
explicit AssignExpr(ExprBase *parent,Token name_in,Expr value_in)
:ExprBase(parent),
name(std::move(name_in)),
value(std::move(value_in)){
BindParent(name,this);
BindParent(value,this);
}
friend AstNode;
public:
Token name;
Expr value;

object::LoxObject Accept(ExprVisitor * visitor) override {
  return visitor->Visit(this);
}
};

class LogicalExpr:public ExprBase
{
private:
explicit LogicalExpr(ExprBase *parent,Expr left_in,Token op_in,Expr right_in)
:ExprBase(parent),
left(std::move(left_in)),
op(std::move(op_in)),
right(std::move(right_in)){
BindParent(left,this);
BindParent(op,this);
BindParent(right,this);
}
friend AstNode;
public:
Expr left;
Token op;
Expr right;

object::LoxObject Accept(ExprVisitor * visitor) override {
  return visitor->Visit(this);
}
};

class BinaryExpr:public ExprBase
{
private:
explicit BinaryExpr(ExprBase *parent,Expr left_in,Token op_in,Expr right_in)
:ExprBase(parent),
left(std::move(left_in)),
op(std::move(op_in)),
right(std::move(right_in)){
BindParent(left,this);
BindParent(op,this);
BindParent(right,this);
}
friend AstNode;
public:
Expr left;
Token op;
Expr right;

object::LoxObject Accept(ExprVisitor * visitor) override {
  return visitor->Visit(this);
}
};

class GroupingExpr:public ExprBase
{
private:
explicit GroupingExpr(ExprBase *parent,Expr expression_in)
:ExprBase(parent),
expression(std::move(expression_in)){
BindParent(expression,this);
}
friend AstNode;
public:
Expr expression;

object::LoxObject Accept(ExprVisitor * visitor) override {
  return visitor->Visit(this);
}
};

class LiteralExpr:public ExprBase
{
private:
explicit LiteralExpr(ExprBase *parent,Token value_in)
:ExprBase(parent),
value(std::move(value_in)){
BindParent(value,this);
}
friend AstNode;
public:
Token value;

object::LoxObject Accept(ExprVisitor * visitor) override {
  return visitor->Visit(this);
}
};

class UnaryExpr:public ExprBase
{
private:
explicit UnaryExpr(ExprBase *parent,Token op_in,Expr right_in)
:ExprBase(parent),
op(std::move(op_in)),
right(std::move(right_in)){
BindParent(op,this);
BindParent(right,this);
}
friend AstNode;
public:
Token op;
Expr right;

object::LoxObject Accept(ExprVisitor * visitor) override {
  return visitor->Visit(this);
}
};

class CallExpr:public ExprBase
{
private:
explicit CallExpr(ExprBase *parent,Expr callee_in,Token paren_in,std::vector<Expr> arguments_in)
:ExprBase(parent),
callee(std::move(callee_in)),
paren(std::move(paren_in)),
arguments(std::move(arguments_in)){
BindParent(callee,this);
BindParent(paren,this);
BindParent(arguments,this);
}
friend AstNode;
public:
Expr callee;
Token paren;
std::vector<Expr> arguments;

object::LoxObject Accept(ExprVisitor * visitor) override {
  return visitor->Visit(this);
}
};

class GetAttrExpr:public ExprBase
{
private:
explicit GetAttrExpr(ExprBase *parent,Expr src_object_in,Token attr_name_in)
:ExprBase(parent),
src_object(std::move(src_object_in)),
attr_name(std::move(attr_name_in)){
BindParent(src_object,this);
BindParent(attr_name,this);
}
friend AstNode;
public:
Expr src_object;
Token attr_name;

object::LoxObject Accept(ExprVisitor * visitor) override {
  return visitor->Visit(this);
}
};

class SetAttrExpr:public ExprBase
{
private:
explicit SetAttrExpr(ExprBase *parent,Expr src_object_in,Token attr_name_in,Expr value_in)
:ExprBase(parent),
src_object(std::move(src_object_in)),
attr_name(std::move(attr_name_in)),
value(std::move(value_in)){
BindParent(src_object,this);
BindParent(attr_name,this);
BindParent(value,this);
}
friend AstNode;
public:
Expr src_object;
Token attr_name;
Expr value;

object::LoxObject Accept(ExprVisitor * visitor) override {
  return visitor->Visit(this);
}
};

class VariableExpr:public ExprBase
{
private:
explicit VariableExpr(ExprBase *parent,Token name_in)
:ExprBase(parent),
name(std::move(name_in)){
BindParent(name,this);
}
friend AstNode;
public:
Token name;

object::LoxObject Accept(ExprVisitor * visitor) override {
  return visitor->Visit(this);
}
};


} // namespace lox
// clang-format on
