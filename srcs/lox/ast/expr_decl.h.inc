
// clang-format off
// DO NOT EDIT: this file is generated by nodes_code_writer.py at 07/26/2021, 00:32:39
// The file in source tree will only be used when python3 is not found by cmake, and might be out of sync.

namespace lox{

namespace private_ns{

class ExprImpl {
 public:
  virtual ~ExprImpl() {
    // just make ExprImpl a virtual class to support dynamic_cast
  }
};

} // namespace private_ns


class Binary:public private_ns::ExprImpl
{
public:
Binary(Expr left,Token op,Expr right)
:left(left),
op(op),
right(right){}
Expr left;
Token op;
Expr right;


private:
friend class Expr;
template <class RetT>
RetT Accept(Visitor<RetT>* visitor){
  return visitor->VisitBinary(this);
}
  
};

class Grouping:public private_ns::ExprImpl
{
public:
Grouping(Expr expression)
:expression(expression){}
Expr expression;


private:
friend class Expr;
template <class RetT>
RetT Accept(Visitor<RetT>* visitor){
  return visitor->VisitGrouping(this);
}
  
};

class Literal:public private_ns::ExprImpl
{
public:
Literal(Token value)
:value(value){}
Token value;


private:
friend class Expr;
template <class RetT>
RetT Accept(Visitor<RetT>* visitor){
  return visitor->VisitLiteral(this);
}
  
};

class Unary:public private_ns::ExprImpl
{
public:
Unary(Token op,Expr right)
:op(op),
right(right){}
Token op;
Expr right;


private:
friend class Expr;
template <class RetT>
RetT Accept(Visitor<RetT>* visitor){
  return visitor->VisitUnary(this);
}
  
};


template <class RetT>
RetT Expr::Accept(Visitor<RetT> * visitor) {
if(auto p = dynamic_cast<Binary *>(this->impl.get())){return p->Accept(visitor);}
if(auto p = dynamic_cast<Grouping *>(this->impl.get())){return p->Accept(visitor);}
if(auto p = dynamic_cast<Literal *>(this->impl.get())){return p->Accept(visitor);}
if(auto p = dynamic_cast<Unary *>(this->impl.get())){return p->Accept(visitor);}

throw "Dispatch Fail";
}

template <class RetT>
class Visitor {
protected:

friend class Binary;
virtual RetT VisitBinary(Binary *) = 0;

friend class Grouping;
virtual RetT VisitGrouping(Grouping *) = 0;

friend class Literal;
virtual RetT VisitLiteral(Literal *) = 0;

friend class Unary;
virtual RetT VisitUnary(Unary *) = 0;

};

} // namespace lox
// clang-format on
