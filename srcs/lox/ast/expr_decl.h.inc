
// clang-format off
// DO NOT EDIT: this file is generated by nodes_code_writer.py at 07/26/2021, 02:05:18
// The file in source tree will only be used when python3 is not found by cmake, and might be out of sync.

namespace lox{

namespace private_ns{

class ExprImpl {
 public:
  virtual ~ExprImpl() {
    // just make ExprImpl a virtual class to support dynamic_cast
  }
  virtual int TypeId() = 0;
};

} // namespace private_ns


class Binary:public private_ns::ExprImpl
{
public:
explicit Binary(Expr left,Token op,Expr right)
:left(std::move(left)),
op(std::move(op)),
right(std::move(right)){}
Expr left;
Token op;
Expr right;

int TypeId() override {
    return 10001;
}
};

class Grouping:public private_ns::ExprImpl
{
public:
explicit Grouping(Expr expression)
:expression(std::move(expression)){}
Expr expression;

int TypeId() override {
    return 10002;
}
};

class Literal:public private_ns::ExprImpl
{
public:
explicit Literal(Token value)
:value(std::move(value)){}
Token value;

int TypeId() override {
    return 10003;
}
};

class Unary:public private_ns::ExprImpl
{
public:
explicit Unary(Token op,Expr right)
:op(std::move(op)),
right(std::move(right)){}
Token op;
Expr right;

int TypeId() override {
    return 10004;
}
};


template <class RetT>
class Visitor {

public:
RetT Visit(Expr * expr){
switch(expr->ImplHandle()->TypeId()){
case 10001:return Visit(static_cast<Binary *>(expr->ImplHandle()));
case 10002:return Visit(static_cast<Grouping *>(expr->ImplHandle()));
case 10003:return Visit(static_cast<Literal *>(expr->ImplHandle()));
case 10004:return Visit(static_cast<Unary *>(expr->ImplHandle()));

default: throw "Dispatch Fail";
}
}

protected:

virtual RetT Visit(Binary *) = 0;

virtual RetT Visit(Grouping *) = 0;

virtual RetT Visit(Literal *) = 0;

virtual RetT Visit(Unary *) = 0;

};

} // namespace lox
// clang-format on
