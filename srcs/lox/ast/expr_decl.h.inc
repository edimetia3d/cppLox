
// clang-format off
// DO NOT EDIT: this file is generated by nodes_code_writer.py at 08/20/2021, 00:14:14
// The file in source tree will only be used when python3 is not found by cmake, and might be out of sync.

#include "lox/lox_object/lox_object.h"
namespace lox{
class AssignExpr;
class LogicalExpr;
class BinaryExpr;
class GroupingExpr;
class LiteralExpr;
class UnaryExpr;
class CallExpr;
class GetAttrExpr;
class SetAttrExpr;
class VariableExpr;

class ExprVisitor {

protected:

friend class AssignExpr;
virtual object::LoxObject Visit(AssignExpr *) = 0;

friend class LogicalExpr;
virtual object::LoxObject Visit(LogicalExpr *) = 0;

friend class BinaryExpr;
virtual object::LoxObject Visit(BinaryExpr *) = 0;

friend class GroupingExpr;
virtual object::LoxObject Visit(GroupingExpr *) = 0;

friend class LiteralExpr;
virtual object::LoxObject Visit(LiteralExpr *) = 0;

friend class UnaryExpr;
virtual object::LoxObject Visit(UnaryExpr *) = 0;

friend class CallExpr;
virtual object::LoxObject Visit(CallExpr *) = 0;

friend class GetAttrExpr;
virtual object::LoxObject Visit(GetAttrExpr *) = 0;

friend class SetAttrExpr;
virtual object::LoxObject Visit(SetAttrExpr *) = 0;

friend class VariableExpr;
virtual object::LoxObject Visit(VariableExpr *) = 0;

};




class AssignExpr:public ExprBase
{
private:
explicit AssignExpr(Token name,Expr value)
:name(std::move(name)),
value(std::move(value)){}
friend ExprBase;
public:
Token name;
Expr value;

object::LoxObject Accept(ExprVisitor * visitor) override {
  return visitor->Visit(this);
}
};

class LogicalExpr:public ExprBase
{
private:
explicit LogicalExpr(Expr left,Token op,Expr right)
:left(std::move(left)),
op(std::move(op)),
right(std::move(right)){}
friend ExprBase;
public:
Expr left;
Token op;
Expr right;

object::LoxObject Accept(ExprVisitor * visitor) override {
  return visitor->Visit(this);
}
};

class BinaryExpr:public ExprBase
{
private:
explicit BinaryExpr(Expr left,Token op,Expr right)
:left(std::move(left)),
op(std::move(op)),
right(std::move(right)){}
friend ExprBase;
public:
Expr left;
Token op;
Expr right;

object::LoxObject Accept(ExprVisitor * visitor) override {
  return visitor->Visit(this);
}
};

class GroupingExpr:public ExprBase
{
private:
explicit GroupingExpr(Expr expression)
:expression(std::move(expression)){}
friend ExprBase;
public:
Expr expression;

object::LoxObject Accept(ExprVisitor * visitor) override {
  return visitor->Visit(this);
}
};

class LiteralExpr:public ExprBase
{
private:
explicit LiteralExpr(Token value)
:value(std::move(value)){}
friend ExprBase;
public:
Token value;

object::LoxObject Accept(ExprVisitor * visitor) override {
  return visitor->Visit(this);
}
};

class UnaryExpr:public ExprBase
{
private:
explicit UnaryExpr(Token op,Expr right)
:op(std::move(op)),
right(std::move(right)){}
friend ExprBase;
public:
Token op;
Expr right;

object::LoxObject Accept(ExprVisitor * visitor) override {
  return visitor->Visit(this);
}
};

class CallExpr:public ExprBase
{
private:
explicit CallExpr(Expr callee,Token paren,std::vector<Expr> arguments)
:callee(std::move(callee)),
paren(std::move(paren)),
arguments(std::move(arguments)){}
friend ExprBase;
public:
Expr callee;
Token paren;
std::vector<Expr> arguments;

object::LoxObject Accept(ExprVisitor * visitor) override {
  return visitor->Visit(this);
}
};

class GetAttrExpr:public ExprBase
{
private:
explicit GetAttrExpr(Expr src_object,Token attr_name)
:src_object(std::move(src_object)),
attr_name(std::move(attr_name)){}
friend ExprBase;
public:
Expr src_object;
Token attr_name;

object::LoxObject Accept(ExprVisitor * visitor) override {
  return visitor->Visit(this);
}
};

class SetAttrExpr:public ExprBase
{
private:
explicit SetAttrExpr(Expr src_object,Token attr_name,Expr value)
:src_object(std::move(src_object)),
attr_name(std::move(attr_name)),
value(std::move(value)){}
friend ExprBase;
public:
Expr src_object;
Token attr_name;
Expr value;

object::LoxObject Accept(ExprVisitor * visitor) override {
  return visitor->Visit(this);
}
};

class VariableExpr:public ExprBase
{
private:
explicit VariableExpr(Token name)
:name(std::move(name)){}
friend ExprBase;
public:
Token name;

object::LoxObject Accept(ExprVisitor * visitor) override {
  return visitor->Visit(this);
}
};


} // namespace lox
// clang-format on
