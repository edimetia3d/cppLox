
// clang-format off
// DO NOT EDIT: this file is generated by nodes_code_writer.py at 07/26/2021, 14:26:41
// The file in source tree will only be used when python3 is not found by cmake, and might be out of sync.

namespace lox{


class ExprState {
 public:
  virtual ~ExprState() {
    // just make ExprState a virtual class to support dynamic_cast
  }
  virtual int TypeId() = 0;
};



class BinaryState:public ExprState
{
public:
explicit BinaryState(Expr left,Token op,Expr right)
:left(std::move(left)),
op(std::move(op)),
right(std::move(right)){}
Expr left;
Token op;
Expr right;

int TypeId() override {
    return 10001;
}
};

class GroupingState:public ExprState
{
public:
explicit GroupingState(Expr expression)
:expression(std::move(expression)){}
Expr expression;

int TypeId() override {
    return 10002;
}
};

class LiteralState:public ExprState
{
public:
explicit LiteralState(Token value)
:value(std::move(value)){}
Token value;

int TypeId() override {
    return 10003;
}
};

class UnaryState:public ExprState
{
public:
explicit UnaryState(Token op,Expr right)
:op(std::move(op)),
right(std::move(right)){}
Token op;
Expr right;

int TypeId() override {
    return 10004;
}
};


template <class RetT>
class Visitor {

protected:
RetT Dispatch(ExprState * state){
switch(state->TypeId()){
case 10001:return Visit(static_cast<BinaryState *>(state));
case 10002:return Visit(static_cast<GroupingState *>(state));
case 10003:return Visit(static_cast<LiteralState *>(state));
case 10004:return Visit(static_cast<UnaryState *>(state));

default: throw "Dispatch Fail";
}
}

protected:

virtual RetT Visit(BinaryState *) = 0;

virtual RetT Visit(GroupingState *) = 0;

virtual RetT Visit(LiteralState *) = 0;

virtual RetT Visit(UnaryState *) = 0;

};

} // namespace lox
// clang-format on
